// Code generated by ent, DO NOT EDIT.

package ent

import (
	"oruka/ent/schema"
	"oruka/ent/timerecord"
	"oruka/ent/user"
	"time"
)

// The init function reads all schema descriptors with runtime code
// (default values, validators, hooks and policies) and stitches it
// to their package variables.
func init() {
	timerecordMixin := schema.TimeRecord{}.Mixin()
	timerecordMixinFields0 := timerecordMixin[0].Fields()
	_ = timerecordMixinFields0
	timerecordFields := schema.TimeRecord{}.Fields()
	_ = timerecordFields
	// timerecordDescCreatedAt is the schema descriptor for created_at field.
	timerecordDescCreatedAt := timerecordMixinFields0[0].Descriptor()
	// timerecord.DefaultCreatedAt holds the default value on creation for the created_at field.
	timerecord.DefaultCreatedAt = timerecordDescCreatedAt.Default.(func() time.Time)
	// timerecordDescUpdatedAt is the schema descriptor for updated_at field.
	timerecordDescUpdatedAt := timerecordMixinFields0[1].Descriptor()
	// timerecord.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	timerecord.DefaultUpdatedAt = timerecordDescUpdatedAt.Default.(func() time.Time)
	// timerecord.UpdateDefaultUpdatedAt holds the default value on update for the updated_at field.
	timerecord.UpdateDefaultUpdatedAt = timerecordDescUpdatedAt.UpdateDefault.(func() time.Time)
	userMixin := schema.User{}.Mixin()
	userMixinFields0 := userMixin[0].Fields()
	_ = userMixinFields0
	userFields := schema.User{}.Fields()
	_ = userFields
	// userDescCreatedAt is the schema descriptor for created_at field.
	userDescCreatedAt := userMixinFields0[0].Descriptor()
	// user.DefaultCreatedAt holds the default value on creation for the created_at field.
	user.DefaultCreatedAt = userDescCreatedAt.Default.(func() time.Time)
	// userDescUpdatedAt is the schema descriptor for updated_at field.
	userDescUpdatedAt := userMixinFields0[1].Descriptor()
	// user.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	user.DefaultUpdatedAt = userDescUpdatedAt.Default.(func() time.Time)
	// user.UpdateDefaultUpdatedAt holds the default value on update for the updated_at field.
	user.UpdateDefaultUpdatedAt = userDescUpdatedAt.UpdateDefault.(func() time.Time)
	// userDescFirstName is the schema descriptor for first_name field.
	userDescFirstName := userFields[0].Descriptor()
	// user.FirstNameValidator is a validator for the "first_name" field. It is called by the builders before save.
	user.FirstNameValidator = userDescFirstName.Validators[0].(func(string) error)
	// userDescLastName is the schema descriptor for last_name field.
	userDescLastName := userFields[1].Descriptor()
	// user.LastNameValidator is a validator for the "last_name" field. It is called by the builders before save.
	user.LastNameValidator = userDescLastName.Validators[0].(func(string) error)
	// userDescManavisID is the schema descriptor for manavis_id field.
	userDescManavisID := userFields[2].Descriptor()
	// user.ManavisIDValidator is a validator for the "manavis_id" field. It is called by the builders before save.
	user.ManavisIDValidator = userDescManavisID.Validators[0].(func(int) error)
	// userDescGrade is the schema descriptor for grade field.
	userDescGrade := userFields[3].Descriptor()
	// user.GradeValidator is a validator for the "grade" field. It is called by the builders before save.
	user.GradeValidator = func() func(int) error {
		validators := userDescGrade.Validators
		fns := [...]func(int) error{
			validators[0].(func(int) error),
			validators[1].(func(int) error),
		}
		return func(grade int) error {
			for _, fn := range fns {
				if err := fn(grade); err != nil {
					return err
				}
			}
			return nil
		}
	}()
}
