// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"oruka/ent/predicate"
	"oruka/ent/timerecord"
	"oruka/ent/user"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// TimeRecordUpdate is the builder for updating TimeRecord entities.
type TimeRecordUpdate struct {
	config
	hooks    []Hook
	mutation *TimeRecordMutation
}

// Where appends a list predicates to the TimeRecordUpdate builder.
func (tru *TimeRecordUpdate) Where(ps ...predicate.TimeRecord) *TimeRecordUpdate {
	tru.mutation.Where(ps...)
	return tru
}

// SetUpdatedAt sets the "updated_at" field.
func (tru *TimeRecordUpdate) SetUpdatedAt(t time.Time) *TimeRecordUpdate {
	tru.mutation.SetUpdatedAt(t)
	return tru
}

// SetDeletedAt sets the "deleted_at" field.
func (tru *TimeRecordUpdate) SetDeletedAt(t time.Time) *TimeRecordUpdate {
	tru.mutation.SetDeletedAt(t)
	return tru
}

// SetTimeKeeperID sets the "timeKeeper" edge to the User entity by ID.
func (tru *TimeRecordUpdate) SetTimeKeeperID(id int) *TimeRecordUpdate {
	tru.mutation.SetTimeKeeperID(id)
	return tru
}

// SetNillableTimeKeeperID sets the "timeKeeper" edge to the User entity by ID if the given value is not nil.
func (tru *TimeRecordUpdate) SetNillableTimeKeeperID(id *int) *TimeRecordUpdate {
	if id != nil {
		tru = tru.SetTimeKeeperID(*id)
	}
	return tru
}

// SetTimeKeeper sets the "timeKeeper" edge to the User entity.
func (tru *TimeRecordUpdate) SetTimeKeeper(u *User) *TimeRecordUpdate {
	return tru.SetTimeKeeperID(u.ID)
}

// Mutation returns the TimeRecordMutation object of the builder.
func (tru *TimeRecordUpdate) Mutation() *TimeRecordMutation {
	return tru.mutation
}

// ClearTimeKeeper clears the "timeKeeper" edge to the User entity.
func (tru *TimeRecordUpdate) ClearTimeKeeper() *TimeRecordUpdate {
	tru.mutation.ClearTimeKeeper()
	return tru
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tru *TimeRecordUpdate) Save(ctx context.Context) (int, error) {
	tru.defaults()
	return withHooks[int, TimeRecordMutation](ctx, tru.sqlSave, tru.mutation, tru.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tru *TimeRecordUpdate) SaveX(ctx context.Context) int {
	affected, err := tru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tru *TimeRecordUpdate) Exec(ctx context.Context) error {
	_, err := tru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tru *TimeRecordUpdate) ExecX(ctx context.Context) {
	if err := tru.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tru *TimeRecordUpdate) defaults() {
	if _, ok := tru.mutation.UpdatedAt(); !ok {
		v := timerecord.UpdateDefaultUpdatedAt()
		tru.mutation.SetUpdatedAt(v)
	}
}

func (tru *TimeRecordUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(timerecord.Table, timerecord.Columns, sqlgraph.NewFieldSpec(timerecord.FieldID, field.TypeInt))
	if ps := tru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tru.mutation.UpdatedAt(); ok {
		_spec.SetField(timerecord.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := tru.mutation.DeletedAt(); ok {
		_spec.SetField(timerecord.FieldDeletedAt, field.TypeTime, value)
	}
	if tru.mutation.TimeKeeperCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   timerecord.TimeKeeperTable,
			Columns: []string{timerecord.TimeKeeperColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tru.mutation.TimeKeeperIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   timerecord.TimeKeeperTable,
			Columns: []string{timerecord.TimeKeeperColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, tru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{timerecord.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	tru.mutation.done = true
	return n, nil
}

// TimeRecordUpdateOne is the builder for updating a single TimeRecord entity.
type TimeRecordUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *TimeRecordMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (truo *TimeRecordUpdateOne) SetUpdatedAt(t time.Time) *TimeRecordUpdateOne {
	truo.mutation.SetUpdatedAt(t)
	return truo
}

// SetDeletedAt sets the "deleted_at" field.
func (truo *TimeRecordUpdateOne) SetDeletedAt(t time.Time) *TimeRecordUpdateOne {
	truo.mutation.SetDeletedAt(t)
	return truo
}

// SetTimeKeeperID sets the "timeKeeper" edge to the User entity by ID.
func (truo *TimeRecordUpdateOne) SetTimeKeeperID(id int) *TimeRecordUpdateOne {
	truo.mutation.SetTimeKeeperID(id)
	return truo
}

// SetNillableTimeKeeperID sets the "timeKeeper" edge to the User entity by ID if the given value is not nil.
func (truo *TimeRecordUpdateOne) SetNillableTimeKeeperID(id *int) *TimeRecordUpdateOne {
	if id != nil {
		truo = truo.SetTimeKeeperID(*id)
	}
	return truo
}

// SetTimeKeeper sets the "timeKeeper" edge to the User entity.
func (truo *TimeRecordUpdateOne) SetTimeKeeper(u *User) *TimeRecordUpdateOne {
	return truo.SetTimeKeeperID(u.ID)
}

// Mutation returns the TimeRecordMutation object of the builder.
func (truo *TimeRecordUpdateOne) Mutation() *TimeRecordMutation {
	return truo.mutation
}

// ClearTimeKeeper clears the "timeKeeper" edge to the User entity.
func (truo *TimeRecordUpdateOne) ClearTimeKeeper() *TimeRecordUpdateOne {
	truo.mutation.ClearTimeKeeper()
	return truo
}

// Where appends a list predicates to the TimeRecordUpdate builder.
func (truo *TimeRecordUpdateOne) Where(ps ...predicate.TimeRecord) *TimeRecordUpdateOne {
	truo.mutation.Where(ps...)
	return truo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (truo *TimeRecordUpdateOne) Select(field string, fields ...string) *TimeRecordUpdateOne {
	truo.fields = append([]string{field}, fields...)
	return truo
}

// Save executes the query and returns the updated TimeRecord entity.
func (truo *TimeRecordUpdateOne) Save(ctx context.Context) (*TimeRecord, error) {
	truo.defaults()
	return withHooks[*TimeRecord, TimeRecordMutation](ctx, truo.sqlSave, truo.mutation, truo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (truo *TimeRecordUpdateOne) SaveX(ctx context.Context) *TimeRecord {
	node, err := truo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (truo *TimeRecordUpdateOne) Exec(ctx context.Context) error {
	_, err := truo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (truo *TimeRecordUpdateOne) ExecX(ctx context.Context) {
	if err := truo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (truo *TimeRecordUpdateOne) defaults() {
	if _, ok := truo.mutation.UpdatedAt(); !ok {
		v := timerecord.UpdateDefaultUpdatedAt()
		truo.mutation.SetUpdatedAt(v)
	}
}

func (truo *TimeRecordUpdateOne) sqlSave(ctx context.Context) (_node *TimeRecord, err error) {
	_spec := sqlgraph.NewUpdateSpec(timerecord.Table, timerecord.Columns, sqlgraph.NewFieldSpec(timerecord.FieldID, field.TypeInt))
	id, ok := truo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "TimeRecord.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := truo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, timerecord.FieldID)
		for _, f := range fields {
			if !timerecord.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != timerecord.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := truo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := truo.mutation.UpdatedAt(); ok {
		_spec.SetField(timerecord.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := truo.mutation.DeletedAt(); ok {
		_spec.SetField(timerecord.FieldDeletedAt, field.TypeTime, value)
	}
	if truo.mutation.TimeKeeperCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   timerecord.TimeKeeperTable,
			Columns: []string{timerecord.TimeKeeperColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := truo.mutation.TimeKeeperIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   timerecord.TimeKeeperTable,
			Columns: []string{timerecord.TimeKeeperColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &TimeRecord{config: truo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, truo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{timerecord.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	truo.mutation.done = true
	return _node, nil
}
