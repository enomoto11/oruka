// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"oruka/ent/timerecord"
	"oruka/ent/user"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
)

// TimeRecord is the model entity for the TimeRecord schema.
type TimeRecord struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt *time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the TimeRecordQuery when eager-loading is set.
	Edges             TimeRecordEdges `json:"edges"`
	user_time_records *int
}

// TimeRecordEdges holds the relations/edges for other nodes in the graph.
type TimeRecordEdges struct {
	// TimeKeeper holds the value of the timeKeeper edge.
	TimeKeeper *User `json:"timeKeeper,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// TimeKeeperOrErr returns the TimeKeeper value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TimeRecordEdges) TimeKeeperOrErr() (*User, error) {
	if e.loadedTypes[0] {
		if e.TimeKeeper == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.TimeKeeper, nil
	}
	return nil, &NotLoadedError{edge: "timeKeeper"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*TimeRecord) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case timerecord.FieldID:
			values[i] = new(sql.NullInt64)
		case timerecord.FieldCreatedAt, timerecord.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case timerecord.ForeignKeys[0]: // user_time_records
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type TimeRecord", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the TimeRecord fields.
func (tr *TimeRecord) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case timerecord.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			tr.ID = int(value.Int64)
		case timerecord.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				tr.CreatedAt = new(time.Time)
				*tr.CreatedAt = value.Time
			}
		case timerecord.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				tr.UpdatedAt = value.Time
			}
		case timerecord.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field user_time_records", value)
			} else if value.Valid {
				tr.user_time_records = new(int)
				*tr.user_time_records = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryTimeKeeper queries the "timeKeeper" edge of the TimeRecord entity.
func (tr *TimeRecord) QueryTimeKeeper() *UserQuery {
	return NewTimeRecordClient(tr.config).QueryTimeKeeper(tr)
}

// Update returns a builder for updating this TimeRecord.
// Note that you need to call TimeRecord.Unwrap() before calling this method if this TimeRecord
// was returned from a transaction, and the transaction was committed or rolled back.
func (tr *TimeRecord) Update() *TimeRecordUpdateOne {
	return NewTimeRecordClient(tr.config).UpdateOne(tr)
}

// Unwrap unwraps the TimeRecord entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (tr *TimeRecord) Unwrap() *TimeRecord {
	_tx, ok := tr.config.driver.(*txDriver)
	if !ok {
		panic("ent: TimeRecord is not a transactional entity")
	}
	tr.config.driver = _tx.drv
	return tr
}

// String implements the fmt.Stringer.
func (tr *TimeRecord) String() string {
	var builder strings.Builder
	builder.WriteString("TimeRecord(")
	builder.WriteString(fmt.Sprintf("id=%v, ", tr.ID))
	if v := tr.CreatedAt; v != nil {
		builder.WriteString("created_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(tr.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// TimeRecords is a parsable slice of TimeRecord.
type TimeRecords []*TimeRecord
